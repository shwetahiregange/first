package com.javaTpoint.service;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.javaTpoint.StudentApplication;
import com.javaTpoint.service.StudentNameService;

import antlr.collections.List;


@Service
public class BufferWriteforNameService extends ExportData
{

	@Autowired  
	private StudentNameService studentNameService; 
	private static final Logger logger = LogManager.getLogger(StudentApplication.class);
	public String idNameGenerate()
	{   String out="";
		for(int i=1;i<=2;i++)
		{
			out= out+ studentNameService.getUser(i).getId()+"   " +studentNameService.getUser(i).getName()+"\n";
		}
		return out;  
	}

	@Override
	public
	void exportToExcel() {
		
		HSSFWorkbook workbook = new HSSFWorkbook();
		HSSFSheet sheet = workbook.createSheet("Student Details");
		
		Map<Integer, Object[]> data = new HashMap<Integer, Object[]>();
		int rownum = 0;
		data.put(0, new Object[] {"Student ID", "Student Name"});	
		
			for(int i=1;i<=2;i++) {
				
		data.put(i, new Object[] {studentNameService.getUser(i).getId(), studentNameService.getUser(i).getName()});
	 
			}
		Set<Integer> keyset = data.keySet();
		for (Integer key : keyset) {
			
			Row row = sheet.createRow(rownum++);
			Object [] objArr = data.get(key);
			int cellnum = 0;
			for (Object obj : objArr) {
				Cell cell = row.createCell(cellnum++);
				if(obj instanceof Integer) 
					cell.setCellValue((Integer)obj);
				
				else if(obj instanceof String)
					cell.setCellValue((String)obj);
			
				
			}
		}
			
		try {
			FileOutputStream out = 
					new FileOutputStream(new File("D:\\StudName\\ExcelFile.xls"));
			workbook.write(out);
			out.close();
			logger.info("Excel written successfully..");
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}	
		
		
//		BufferedWriter bw = null;
//		try
//		{
//			String mycontent =idNameGenerate();
//			File file = new File("D:\\StudName\\ExcelFile.xls");
//
//			/* This logic will make sure that the file 
//			 * gets created if it is not present at the
//			 * specified location*/
//			if (!file.exists())
//			{
//				file.createNewFile();
//			}
//			FileWriter fw = new FileWriter(file);
//			bw = new BufferedWriter(fw);
//			bw.write(mycontent);
//			logger.info("File written Successfully");
//			
//			
//		}
//		catch (IOException ioe)
//		{
//			ioe.printStackTrace();
//		}
//		finally
//		{ 
//			try
//			{
//				if(bw!=null)
//					bw.close();
//			}
//			catch(Exception ex)
//			{
//				logger.error("Error in closing the BufferedWriter"+ex);
//			}
//		}
//		
	

	@Override
	public
	void exportToPdf() {
		BufferedWriter bw = null;
		try
		{
			String mycontent =idNameGenerate();
					
			//Specify the file name and path here
			File file = new File("D:\\StudName\\shwet.pdf");

			/* This logic will make sure that the file 
			 * gets created if it is not present at the
			 * specified location*/
			if (!file.exists())
			{
				file.createNewFile();
			}

			FileWriter fw = new FileWriter(file);
			bw = new BufferedWriter(fw);
			bw.write(mycontent);
			logger.info("File written Successfully");

		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
		finally
		{ 
			try
			{
				if(bw!=null)
					bw.close();
			}
			catch(Exception ex)
			{
				logger.error("Error in closing the BufferedWriter"+ex);
			}
		}
		
	}

}
